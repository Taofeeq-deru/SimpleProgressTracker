{"version":3,"sources":["Todo.js","TodoList.js","App.js","index.js"],"names":["Todo","todo","toggleTodo","className","type","checked","complete","onChange","id","name","TodoList","todos","map","key","App","useState","setTodos","todoNameRef","useRef","PercentageDone","percentDone","length","percent","filter","useEffect","storedTodos","JSON","parse","localStorage","getItem","setItem","stringify","newTodos","find","ref","onClick","e","current","value","console","log","prevTodos","uuidv4","ReactDOM","render","document","getElementById"],"mappings":"oKAEe,SAASA,EAAT,GAAmC,IAApBC,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,WAIhC,OACI,yBAAKC,UAAU,oBACX,+BACI,2BAAOC,KAAK,WAAWC,QAASJ,EAAKK,SAAUC,SAN3D,WACIL,EAAWD,EAAKO,KAKkEL,UAAU,SACnFF,EAAKQ,OCPP,SAASC,EAAT,GAA0C,IAAtBC,EAAqB,EAArBA,MAAOT,EAAc,EAAdA,WACtC,OACIS,EAAMC,KAAI,SAAAX,GACN,OAAO,kBAACD,EAAD,CAAMa,IAAKZ,EAAKO,GAAIN,WAAYA,EAAYD,KAAMA,O,oBCqEtDa,MArEf,WAAgB,IAAD,EACYC,mBAAS,IADrB,mBACNJ,EADM,KACCK,EADD,KAEPC,EAAcC,mBAsCpB,SAASC,IACP,IAAIC,EACJ,GAAqB,IAAjBT,EAAMU,OACRD,EAAW,gBACP,CACJ,IAAIE,EAAYX,EAAMY,QAAO,SAAAtB,GAAI,OAAIA,EAAKK,YAAUe,OAAUV,EAAMU,OAAU,IAC9ED,EAAW,UAAME,EAAN,UAEb,OAAOF,EAGT,OA/CAI,qBAAU,WACR,IAAMC,EAAcC,KAAKC,MAAMC,aAAaC,QAPtB,kBAQlBJ,GAAaT,EAASS,KACzB,IAEHD,qBAAU,WACRI,aAAaE,QAZS,gBAYkBJ,KAAKK,UAAUpB,MACtD,CAACA,IAyCF,6BACE,wBAAIR,UAAU,8BAAd,kDACA,yBAAKA,UAAU,uCACb,kBAACO,EAAD,CAAUC,MAAOA,EAAQT,WA1C/B,SAAoBM,GAClB,IAAMwB,EAAQ,YAAOrB,GACfV,EAAO+B,EAASC,MAAK,SAAAhC,GAAI,OAAIA,EAAKO,KAAOA,KAC/CP,EAAKK,UAAYL,EAAKK,SACtBU,EAASgB,MAuCL,0BAAM7B,UAAU,eACd,2BAAOA,UAAU,yBAAyB+B,IAAKjB,EAAab,KAAK,OAAOI,GAAG,cAC3E,4BAAQL,UAAU,4BAA4BgC,QAtCtD,SAAuBC,GACrB,IAAM3B,EAAOQ,EAAYoB,QAAQC,MACpB,KAAT7B,IACJ8B,QAAQC,IAAI/B,GACZO,GAAS,SAAAyB,GACP,MAAM,GAAN,mBAAWA,GAAX,CAAsB,CACpBjC,GAAIkC,MACJjC,KAAMA,EACNH,UAAU,QAGdW,EAAYoB,QAAQC,MAAQ,QA2BtB,YACA,4BAAQnC,UAAU,2BAA2BgC,QAzBrD,WACE,IAAIH,EAAQ,YAAOrB,GACnBqB,EAASX,OAAS,EAClBL,EAASgB,KAsBH,cAEF,yBAAK7B,UAAU,8EACb,kBAACgB,EAAD,CAAgBC,YAAaD,QChEvCwB,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.b26687ae.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function Todo({todo, toggleTodo}) {\r\n    function handleTodoClick() {\r\n        toggleTodo(todo.id)\r\n    }\r\n    return (\r\n        <div className=\"align-self-start\">\r\n            <label>\r\n                <input type=\"checkbox\" checked={todo.complete} onChange={handleTodoClick} className=\"mr-2\"/>\r\n                {todo.name}\r\n            </label>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport Todo from './Todo'\r\n\r\nexport default function TodoList({ todos, toggleTodo }) {\r\n    return (\r\n        todos.map(todo => {\r\n            return <Todo key={todo.id} toggleTodo={toggleTodo} todo={todo}/>\r\n        })\r\n    )\r\n}\r\n","import React, { useState, useRef, useEffect } from 'react';\nimport TodoList from './TodoList'\nimport uuidv4 from 'uuid/v4'\n\nconst LOCAL_STORAGE_KEY = 'todoApp.todos';\n\nfunction App() {\n  const [todos, setTodos]= useState([]);\n  const todoNameRef = useRef();\n\n  useEffect(() => {\n    const storedTodos = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY));\n    if (storedTodos) setTodos(storedTodos)\n  }, [])\n\n  useEffect(() => {\n    localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(todos))\n  }, [todos])\n\n  function toggleTodo(id) {\n    const newTodos = [...todos];\n    const todo = newTodos.find(todo => todo.id === id);\n    todo.complete = !todo.complete\n    setTodos(newTodos)\n  }\n\n  function handleAddTodo(e) {\n    const name = todoNameRef.current.value;\n    if (name === '') return\n    console.log(name);\n    setTodos(prevTodos => {\n      return [...prevTodos, {\n        id: uuidv4(),\n        name: name,\n        complete: false\n      }]\n    })\n    todoNameRef.current.value = null;\n  }\n\n  function handleClearTodos() {\n    let newTodos = [...todos];\n    newTodos.length = 0;\n    setTodos(newTodos)\n  }\n\n  function PercentageDone() {\n    let percentDone;\n    if (todos.length === 0) {\n      percentDone = `Add tasks`;\n    } else{\n      let percent = ((todos.filter(todo => todo.complete).length) / todos.length) * 100;\n      percentDone = `${percent}% done`\n    }\n    return percentDone;\n  }\n\n  return (\n    <div>\n      <h3 className=\"text-center text-dark my-3\">Hi, let's help you track your task progress...</h3>\n      <div className=\"border border-secondary rounded p-5\">\n        <TodoList todos={todos}  toggleTodo={toggleTodo} />\n        <form className=\"form-inline\">\n          <input className=\"form-control mx-1 my-2\" ref={todoNameRef} type=\"text\" id=\"taskInput\"/>\n          <button className=\"btn btn-primary mx-1 my-2\" onClick={handleAddTodo}>Add Todo</button>\n          <button className=\"btn btn-danger mx-1 my-2\" onClick={handleClearTodos}>Clear All</button>\n        </form>\n        <div className=\"w-100 bg-success text-light text-center form-control font-weight-bold my-1\">\n          <PercentageDone percentDone={PercentageDone}/>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}